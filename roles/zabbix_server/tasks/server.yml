---
# tasks file for install_zabbix_server
# -------------------------------------------------------------------------------------------#
- name: Adcionando Repositorio Zabbix Server - {{ ansible_all_ipv4_addresses[0]}}.
  dnf:
    name: https://repo.zabbix.com/zabbix/{{ zbx_version }}/rhel/8/x86_64/zabbix-release-{{ zbx_version }}-1.el8.noarch.rpm
    state: present
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"
# --------------------------------------------------------------------------------------------#
#
- name: Instalando pacotes zabbix-server
  dnf:
    name: '{{ packages_zabbix_server}}'
    state: latest
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"
# --------------------------------------------------------------------------------------------#
- name: Iniciar/ Habilitar zabbix-server / zabbix-agent2
  systemd:
    name: zabbix-server
    state: started
    enabled: yes
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"
#-------------------------------------------------------------------------------#
- name: Setando configurações de segurança no arquivo zabbix_server.conf
  lineinfile:
    dest: /etc/zabbix/zabbix_server.conf
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  loop:
    - { regexp: '# DBHost=localhost', line: 'DBHost={{ zbx_db }}' }
    - { regexp: 'DBName=zabbix', line: 'DBName={{ db_name }}' }
    - { regexp: 'DBUser=zabbix', line: 'DBUser={{ db_user_server }}' }
    - { regexp: '# DBPassword=', line: 'DBPassword={{ db_user_pass_server }}' }
    - { regexp: '# StartPollers=5', line: 'StartPollers=10' }
    - { regexp: '# StartPingers=1', line: 'StartPingers=5' }
    - { regexp: '# CacheSize=8M', line: 'CacheSize=512M' }
    - { regexp: '# Timeout=3', line: 'Timeout=30' }
    - { regexp: '# ValueCacheSize=8M', line: 'ValueCacheSize=1024M' }
    - { regexp: '# VMwareCacheSize=8M', line: 'VMwareCacheSize=1024M' }
    - { regexp: '# StartReportWriters=0', line: 'StartReportWriters=1' }
    - { regexp: '# DBTLSConnect=', line: 'DBTLSConnect=required' }
    - { regexp: '# WebServiceURL=', line: 'WebServiceURL=http://{{zbx_front}}:10053/report' }
  when: ansible_facts['distribution_major_version'] == "8"
  tags: zabbix_server
#-----------------------------------------------------------------------------------#
- name: Copiando Arquivo .my.cnf default
  copy: 
    src: "{{ item.src }}" 
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
    - { src: '.my.cnf', dest: '/root/.my.cnf'}
  when: ansible_facts['distribution_major_version'] == "8"
#---------------------------------------------------------------------------------------------#
- name: Copiando Para realizar Particionamento do Banco de Dados
  copy: 
    src: "{{ item.src }}" 
    dest: "{{ item.dest }}"
  loop:
    - { src: 'part.sql', dest: '/opt/part.sql'}
  when: ansible_facts['distribution_major_version'] == "8"
#-----------------------------------------------------------------------------------#
- name: Importando schema da database do zabbix servidor - {{ zbx_db }}.
  shell: '{{ url_schema }}'
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"

- name: Habilitar a execução do 'part.sql' "{{ zbx_db }}"
  shell: "chmod +x /opt/part.sql"
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"


- name: Converter e Habilitar a execução do 'part.sql'
  shell: "dos2unix /opt/part.sql"
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"

- name: Realizar o particionamento no banco de dados
  shell: MYSQL_PWD="{{ db_user_pass_server }}" mysql -h "{{ zbx_db }}" -u zabbix_server zabbix < /opt/part.sql
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"

- name: Realizar a configuração inicial de manutenção do banco
  shell: MYSQL_PWD="{{ db_user_pass_server }}" mysql -h "{{ zbx_db }}" -u zabbix_server  "{{ db_name }}" -e "CALL partition_maintenance_all('zabbix');"
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"

- name: Realizar a configuração inicial de manutenção do banco
  shell: MYSQL_PWD="{{ db_user_pass_server }}" mysql -h "{{ zbx_db }}" -u zabbix_server  "{{ db_name }}" -e "show create table history\G"
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"
  
- name: Realizar a configuração inicial de manutenção do banco
  shell: MYSQL_PWD="{{ db_user_pass_server }}" mysql -h "{{ zbx_db }}" -u zabbix_server  "{{ db_name }}" -e "show create table trends\G"
  ignore_errors: yes
  when: ansible_facts['distribution_major_version'] == "8"

- name: Criar Arquivo /etc/cron.d
  ansible.builtin.cron:
    name: ansible_partition_db
    weekday: "0"
    minute: "30"
    hour: "3"
    user: root
    job: MYSQL_PWD="{{ db_user_pass_server }}" mysql -h "{{ zbx_db }}" -u zabbix_server  "{{ db_name }}" -e "CALL partition_maintenance_all('zabbix');" > /tmp/CronDBpartitiong.log 2>&1"
    cron_file: ansible_partition_db
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"

# --------------------------------------------------------------------------------------------#
- name: Adcionado Porta firewalld  Zabbix_Server/Zabbix_Agent2
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
  loop:
    - 10051/tcp
    - 10050/tcp
    - 3306/tcp  
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"
# ----------------------------------------------------------------------------------------------#
- name: Reload no firewalld
  systemd:
    name: firewalld
    state: reloaded
    enabled: yes
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"
#-------------------------------------------------------------------------------------------------#
- name: Iniciar/ Restart Zabbix-Server / Agent2
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  loop:
    - zabbix-server
    - zabbix-agent2
    
  tags: zabbix_server
  when: ansible_facts['distribution_major_version'] == "8"
#----------------------------------------------------------------------------------------------#
...
